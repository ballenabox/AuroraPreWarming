{
  "Comment": "Polling RDS instances until they become available and checking AuroraReplicaLag, then warming up with Lambda",
  "StartAt": "DescribeDBInstance",
  "States": {
    "DescribeDBInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBInstances",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.detail.requestParameters.dBInstanceIdentifier"
      },
      "ResultPath": "$.describeResult",
      "Next": "CheckStatus"
    },
    "CheckStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.describeResult.DbInstances[0].DbInstanceStatus",
          "StringEquals": "available",
          "Next": "ExtractStartTime"
        }
      ],
      "Default": "WaitState"
    },
    "WaitState": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "DescribeDBInstance"
    },
    "ExtractStartTime": {
      "Type": "Pass",
      "Parameters": {
        "DbInstanceIdentifier.$": "$.detail.requestParameters.dBInstanceIdentifier",
        "startTime.$": "$.describeResult.DbInstances[0].InstanceCreateTime"
      },
      "ResultPath": "$.time",
      "Next": "ComputeEndTime"
    },
    "ComputeEndTime": {
      "Type": "Pass",
      "Parameters": {
        "startTime.$": "$.time.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "DbInstanceIdentifier.$": "$.time.DbInstanceIdentifier"
      },
      "ResultPath": "$.time",
      "Next": "CheckReplicaLag"
    },
    "CheckReplicaLag": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:getMetricStatistics",
      "Parameters": {
        "Namespace": "AWS/RDS",
        "MetricName": "AuroraReplicaLag",
        "Dimensions": [
          {
            "Name": "DBInstanceIdentifier",
            "Value.$": "$.time.DbInstanceIdentifier"
          }
        ],
        "StartTime.$": "$.time.startTime",
        "EndTime.$": "$.time.endTime",
        "Period": 60,
        "Statistics": [
          "Average"
        ]
      },
      "ResultPath": "$.lagResult",
      "Next": "CheckLagValue"
    },
    "CheckLagValue": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.lagResult.Datapoints[0]",
          "IsPresent": false,
          "Next": "WaitLag"
        },
        {
          "Variable": "$.lagResult.Datapoints[0].Average",
          "NumericLessThanEquals": 100,
          "Next": "InvokeWarmingLambda"
        }
      ],
      "Default": "WaitLag"
    },
    "WaitLag": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "ComputeEndTime"
    },
    "InvokeWarmingLambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-northeast-2:986611521344:function:AuroraReadReplicaWarmingFunction",
        "InvocationType": "RequestResponse",
        "Payload": {
          "DbInstanceIdentifier.$": "$.detail.requestParameters.dBInstanceIdentifier",
          "Address.$": "$.describeResult.DbInstances[0].Endpoint.Address"
        }
      },
      "ResultPath": "$.warmResult",
      "Next": "DescribeDBClusterEndpoints"
    },
    "DescribeDBClusterEndpoints": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:describeDBClusterEndpoints",
      "Parameters": {
        "DbClusterIdentifier.$": "$.describeResult.DbInstances[0].DbClusterIdentifier",
        "DbClusterEndpointIdentifier": "custom"
      },
      "ResultSelector": {
        "endpointInfo.$": "$.DbClusterEndpoints[0]",
        "staticMembers.$": "$.DbClusterEndpoints[0].StaticMembers"
      },
      "ResultPath": "$.endpointDetails",
      "Next": "UpdateStaticMembersLambda"
    },
    "UpdateStaticMembersLambda": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "arn:aws:lambda:ap-northeast-2:986611521344:function:junwoo-ReturnStaticMembers",
        "InvocationType": "RequestResponse",
        "Payload": {
          "StaticMembers.$": "$.endpointDetails.endpointInfo.StaticMembers",
          "DbInstanceIdentifier.$": "$.detail.requestParameters.dBInstanceIdentifier"
        }
      },
      "ResultSelector": {
        "updatedStaticMembers.$": "$.Payload"
      },
      "ResultPath": "$.lambdaResult",
      "Next": "ModifyDBClusterEndpoint"
    },
    "ModifyDBClusterEndpoint": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:rds:modifyDBClusterEndpoint",
      "Parameters": {
        "DbClusterEndpointIdentifier": "custom",
        "StaticMembers.$": "$.lambdaResult.updatedStaticMembers.updatedStaticMembers"
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}